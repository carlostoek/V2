from aiogram import types
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext

from src.bot.keyboards.keyboard_factory import KeyboardFactory

async def handle_help(message: types.Message):
    """
    Maneja el comando /help del bot.
    
    Muestra informaci√≥n de ayuda sobre los comandos disponibles
    y c√≥mo utilizar el bot.
    """
    help_text = (
        "**ü§ñ Ayuda de Diana V2 ü§ñ**\n\n"
        "Estos son los comandos disponibles:\n\n"
        "üìú *Comandos b√°sicos:*\n"
        "/start - Inicia el bot y muestra el men√∫ principal\n"
        "/help - Muestra este mensaje de ayuda\n"
        "/profile - Muestra tu perfil y estad√≠sticas\n\n"
        
        "üìö *Navegaci√≥n por men√∫s:*\n"
        "‚Ä¢ Historia: Accede a la narrativa principal\n"
        "‚Ä¢ Perfil: Revisa tus puntos y logros\n"
        "‚Ä¢ Misiones: Consulta tus misiones activas\n"
        "‚Ä¢ Mochila: Gestiona tus objetos\n\n"
        
        "üí° *Consejos:*\n"
        "‚Ä¢ Reacciona a las publicaciones del canal para ganar puntos\n"
        "‚Ä¢ Completa misiones para desbloquear contenido especial\n"
        "‚Ä¢ Explora diferentes ramas de la historia para descubrir todos los secretos\n\n"
        
        "Si necesitas m√°s ayuda, selecciona una opci√≥n a continuaci√≥n:"
    )
    
    await message.answer(
        help_text,
        parse_mode="Markdown",
        reply_markup=KeyboardFactory.help_menu()
    )

async def handle_help_callback(query: types.CallbackQuery):
    """Maneja los callbacks del men√∫ de ayuda."""
    callback_data = query.data
    
    if callback_data == "help:how_to_play":
        text = (
            "**üìñ C√≥mo Jugar üìñ**\n\n"
            "Diana V2 es un bot narrativo interactivo:\n\n"
            "1. **Sigue la historia**: Interact√∫a con el bot para avanzar en la narrativa\n"
            "2. **Toma decisiones**: Tus elecciones afectan el desarrollo de la historia\n"
            "3. **Gana puntos**: Recibe puntos por participar en el canal y completar misiones\n"
            "4. **Desbloquea contenido**: Utiliza tus puntos para acceder a contenido exclusivo\n"
            "5. **Explora ramas**: Descubre diferentes caminos en la historia\n\n"
            "Comienza pulsando el bot√≥n 'Historia' en el men√∫ principal."
        )
        await query.message.edit_text(text, parse_mode="Markdown", reply_markup=KeyboardFactory.back_button("help:back_to_help"))
    
    elif callback_data == "help:commands":
        text = (
            "**‚å®Ô∏è Comandos Disponibles ‚å®Ô∏è**\n\n"
            "/start - Inicia el bot y muestra el men√∫ principal\n"
            "/help - Muestra el men√∫ de ayuda\n"
            "/profile - Muestra tu perfil y estad√≠sticas\n"
            "/daily - Reclama tu recompensa diaria\n"
            "/missions - Muestra tus misiones activas\n"
            "/inventory - Muestra tu inventario\n"
            "/settings - Configura tus preferencias\n\n"
            "Los comandos tambi√©n est√°n disponibles a trav√©s de los men√∫s interactivos."
        )
        await query.message.edit_text(text, parse_mode="Markdown", reply_markup=KeyboardFactory.back_button("help:back_to_help"))
    
    elif callback_data == "help:faq":
        text = (
            "**‚ùì Preguntas Frecuentes ‚ùì**\n\n"
            "**¬øC√≥mo gano puntos?**\n"
            "Puedes ganar puntos reaccionando a publicaciones del canal, completando misiones, y avanzando en la historia.\n\n"
            
            "**¬øPara qu√© sirven los puntos?**\n"
            "Los puntos te permiten desbloquear nuevas ramas de la historia, obtener objetos especiales y acceder a contenido exclusivo.\n\n"
            
            "**¬øPuedo reiniciar mi progreso?**\n"
            "S√≠, puedes reiniciar tu progreso en el men√∫ de configuraci√≥n, pero perder√°s todos tus avances actuales.\n\n"
            
            "**¬øHay contenido VIP?**\n"
            "S√≠, puedes acceder a contenido exclusivo mediante suscripciones premium."
        )
        await query.message.edit_text(text, parse_mode="Markdown", reply_markup=KeyboardFactory.back_button("help:back_to_help"))
    
    elif callback_data == "help:back_to_help":
        await handle_help(query.message)
    
    elif callback_data == "help:back_to_main":
        await query.message.edit_text(
            "¬°Bienvenido a Diana V2! ¬øQu√© te gustar√≠a hacer hoy?",
            reply_markup=KeyboardFactory.main_menu()
        )
    
    await query.answer()

def register_help_handler(dp):
    """Registra los handlers de ayuda en el dispatcher."""
    # Comando /help
    dp.message.register(handle_help, Command("help"))
    
    # Callbacks del men√∫ de ayuda
    dp.callback_query.register(handle_help_callback, lambda c: c.data.startswith("help:"))