"""Handler para gesti√≥n de tarifas VIP."""

from aiogram import Router, F
from aiogram.types import CallbackQuery, Message
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from sqlalchemy.ext.asyncio import AsyncSession
from typing import List, Dict, Any

from ...keyboards.admin.main_kb import get_tariff_management_keyboard
from ...keyboards.admin.tariff_kb import (
    get_tariff_list_keyboard,
    get_tariff_detail_keyboard,
    get_tariff_creation_keyboard,
    get_tariff_edit_keyboard,
    get_channel_selection_keyboard
)
from ...filters.role import IsAdminFilter
from src.modules.admin.service import AdminService
from src.modules.token.tokeneitor import Tokeneitor
from src.modules.channel.service import ChannelService
from src.core.event_bus import EventBus

tariff_router = Router()

class TariffCreationStates(StatesGroup):
    waiting_for_channel = State()
    waiting_for_name = State()
    waiting_for_price = State()
    waiting_for_duration = State()
    waiting_for_description = State()

class TariffEditStates(StatesGroup):
    waiting_for_selection = State()
    waiting_for_field = State()
    waiting_for_value = State()

@tariff_router.callback_query(F.data == "admin:tariffs")
async def show_tariff_management(callback_query: CallbackQuery, session: AsyncSession):
    """Muestra el panel de gesti√≥n de tarifas."""
    try:
        event_bus = EventBus()
        tokeneitor = Tokeneitor(event_bus)
        
        # Obtener estad√≠sticas de tarifas
        tariff_stats = await get_tariff_statistics(tokeneitor)
        
        text = "üí∞ **GESTI√ìN DE TARIFAS**\n\n"
        text += "üìä **Resumen:**\n"
        text += f"‚Ä¢ Tarifas Activas: {tariff_stats['active_count']}\n"
        text += f"‚Ä¢ Tarifas Inactivas: {tariff_stats['inactive_count']}\n"
        text += f"‚Ä¢ Total de Tokens Generados: {tariff_stats['total_tokens']}\n"
        text += f"‚Ä¢ Tokens Canjeados: {tariff_stats['redeemed_tokens']}\n\n"
        
        text += "üéØ **Tarifas M√°s Populares:**\n"
        for tariff in tariff_stats['popular_tariffs']:
            text += f"‚Ä¢ {tariff['name']}: ${tariff['price']:.2f} ({tariff['sales']} ventas)\n"
        
        text += "\nüõ†Ô∏è **Opciones Disponibles:**\n"
        text += "‚Ä¢ Crear nuevas tarifas con precios personalizados\n"
        text += "‚Ä¢ Editar tarifas existentes\n"
        text += "‚Ä¢ Activar/desactivar tarifas seg√∫n demanda\n"
        text += "‚Ä¢ Ver estad√≠sticas detalladas de ventas\n"
        
        await callback_query.message.edit_text(
            text,
            parse_mode="Markdown",
            reply_markup=get_tariff_management_keyboard()
        )
        await callback_query.answer()
        
    except Exception as e:
        await callback_query.answer(f"Error al cargar gesti√≥n de tarifas: {str(e)}")

@tariff_router.callback_query(F.data == "tariff:list")
async def show_tariff_list(callback_query: CallbackQuery, session: AsyncSession):
    """Muestra la lista de todas las tarifas."""
    try:
        event_bus = EventBus()
        tokeneitor = Tokeneitor(event_bus)
        
        # Por ahora usamos datos simulados, despu√©s se conectar√° con el servicio real
        tariffs = [
            {
                "id": 1,
                "name": "VIP 1 Semana",
                "price": 9.99,
                "duration_days": 7,
                "is_active": True,
                "description": "Acceso VIP por 1 semana completa",
                "sales": 45
            },
            {
                "id": 2,
                "name": "VIP 1 Mes",
                "price": 29.99,
                "duration_days": 30,
                "is_active": True,
                "description": "Acceso VIP por 1 mes completo",
                "sales": 67
            },
            {
                "id": 3,
                "name": "VIP 3 Meses",
                "price": 79.99,
                "duration_days": 90,
                "is_active": True,
                "description": "Acceso VIP por 3 meses",
                "sales": 30
            }
        ]
        
        text = "üìã **LISTA DE TARIFAS**\n\n"
        
        for tariff in tariffs:
            status_icon = "‚úÖ" if tariff["is_active"] else "‚ùå"
            text += f"{status_icon} **{tariff['name']}**\n"
            text += f"üí∞ Precio: ${tariff['price']:.2f}\n"
            text += f"‚è∞ Duraci√≥n: {tariff['duration_days']} d√≠as\n"
            text += f"üìä Ventas: {tariff['sales']} tokens\n"
            text += f"üìù {tariff['description']}\n"
            text += "‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n"
        
        text += "\nüí° **Tip:** Haz clic en 'Editar' para modificar cualquier tarifa"
        
        await callback_query.message.edit_text(
            text,
            parse_mode="Markdown",
            reply_markup=get_tariff_list_keyboard(tariffs)
        )
        await callback_query.answer()
        
    except Exception as e:
        await callback_query.answer(f"Error al obtener lista de tarifas: {str(e)}")

@tariff_router.callback_query(F.data == "tariff:create")
async def start_tariff_creation(callback_query: CallbackQuery, state: FSMContext, session: AsyncSession):
    """Inicia el proceso de creaci√≥n de tarifa."""
    try:
        text = "‚ûï **CREAR NUEVA TARIFA**\n\n"
        text += "üéØ **Paso 1/5: Seleccionar Canal**\n\n"
        text += "Selecciona el canal para el cual crear la tarifa:\n"
        text += "‚Ä¢ Canal VIP: Acceso premium con contenido exclusivo\n"
        text += "‚Ä¢ Canal Free: Acceso gratuito con limitaciones\n\n"
        text += "üí° **Tip:** Las tarifas VIP generan m√°s ingresos"
        
        # Simular canales disponibles
        channels = [
            {"id": 1, "name": "Canal VIP Principal", "type": "vip"},
            {"id": 2, "name": "Canal Free", "type": "free"}
        ]
        
        await state.set_state(TariffCreationStates.waiting_for_channel)
        await callback_query.message.edit_text(
            text,
            parse_mode="Markdown",
            reply_markup=get_channel_selection_keyboard(channels)
        )
        await callback_query.answer()
        
    except Exception as e:
        await callback_query.answer(f"Error al iniciar creaci√≥n de tarifa: {str(e)}")

@tariff_router.callback_query(F.data.startswith("channel:select:"), TariffCreationStates.waiting_for_channel)
async def channel_selected(callback_query: CallbackQuery, state: FSMContext):
    """Maneja la selecci√≥n de canal para la nueva tarifa."""
    try:
        channel_id = int(callback_query.data.split(":")[-1])
        await state.update_data(channel_id=channel_id)
        
        text = "‚ûï **CREAR NUEVA TARIFA**\n\n"
        text += "üìù **Paso 2/5: Nombre de la Tarifa**\n\n"
        text += "Ingresa un nombre descriptivo para la tarifa:\n\n"
        text += "üåü **Ejemplos exitosos:**\n"
        text += "‚Ä¢ VIP 1 Semana\n"
        text += "‚Ä¢ VIP Premium 30 D√≠as\n"
        text += "‚Ä¢ VIP Trimestral\n"
        text += "‚Ä¢ Acceso VIP Express\n\n"
        text += "üí° **Tip:** Nombres claros aumentan las conversiones\n\n"
        text += "Escribe el nombre de la tarifa:"
        
        await state.set_state(TariffCreationStates.waiting_for_name)
        await callback_query.message.edit_text(
            text,
            parse_mode="Markdown",
            reply_markup=get_tariff_creation_keyboard("name")
        )
        await callback_query.answer()
        
    except Exception as e:
        await callback_query.answer(f"Error al seleccionar canal: {str(e)}")

@tariff_router.message(TariffCreationStates.waiting_for_name)
async def tariff_name_received(message: Message, state: FSMContext):
    """Recibe el nombre de la tarifa."""
    try:
        await state.update_data(name=message.text.strip())
        
        text = "‚ûï **CREAR NUEVA TARIFA**\n\n"
        text += "üí∞ **Paso 3/5: Precio de la Tarifa**\n\n"
        text += f"üìù **Nombre:** {message.text.strip()}\n\n"
        text += "Ingresa el precio en USD (solo n√∫meros):\n\n"
        text += "üí≤ **Precios Recomendados:**\n"
        text += "‚Ä¢ 1 Semana: $5.99 - $14.99\n"
        text += "‚Ä¢ 1 Mes: $19.99 - $39.99\n"
        text += "‚Ä¢ 3 Meses: $49.99 - $99.99\n"
        text += "‚Ä¢ 6 Meses: $89.99 - $149.99\n\n"
        text += "üí° **Tip:** Precios terminados en .99 convierten mejor\n\n"
        text += "Escribe el precio (ej: 29.99):"
        
        await state.set_state(TariffCreationStates.waiting_for_price)
        await message.answer(
            text,
            parse_mode="Markdown",
            reply_markup=get_tariff_creation_keyboard("price")
        )
        
    except Exception as e:
        await message.answer(f"Error al procesar nombre: {str(e)}")

@tariff_router.message(TariffCreationStates.waiting_for_price)
async def tariff_price_received(message: Message, state: FSMContext):
    """Recibe el precio de la tarifa."""
    try:
        try:
            price = float(message.text.strip())
            if price <= 0:
                raise ValueError("El precio debe ser mayor que 0")
        except ValueError:
            await message.answer(
                "‚ùå **Precio inv√°lido**\n\n"
                "Por favor ingresa un n√∫mero v√°lido mayor que 0.\n"
                "Ejemplo: 29.99"
            )
            return
        
        await state.update_data(price=price)
        data = await state.get_data()
        
        text = "‚ûï **CREAR NUEVA TARIFA**\n\n"
        text += "‚è∞ **Paso 4/5: Duraci√≥n de la Suscripci√≥n**\n\n"
        text += f"üìù **Nombre:** {data['name']}\n"
        text += f"üí∞ **Precio:** ${price:.2f}\n\n"
        text += "Ingresa la duraci√≥n en d√≠as:\n\n"
        text += "üìÖ **Duraciones Populares:**\n"
        text += "‚Ä¢ 7 d√≠as (1 semana)\n"
        text += "‚Ä¢ 30 d√≠as (1 mes)\n"
        text += "‚Ä¢ 90 d√≠as (3 meses)\n"
        text += "‚Ä¢ 180 d√≠as (6 meses)\n"
        text += "‚Ä¢ 365 d√≠as (1 a√±o)\n\n"
        text += "Escribe el n√∫mero de d√≠as:"
        
        await state.set_state(TariffCreationStates.waiting_for_duration)
        await message.answer(
            text,
            parse_mode="Markdown",
            reply_markup=get_tariff_creation_keyboard("duration")
        )
        
    except Exception as e:
        await message.answer(f"Error al procesar precio: {str(e)}")

@tariff_router.message(TariffCreationStates.waiting_for_duration)
async def tariff_duration_received(message: Message, state: FSMContext):
    """Recibe la duraci√≥n de la tarifa."""
    try:
        try:
            duration = int(message.text.strip())
            if duration <= 0:
                raise ValueError("La duraci√≥n debe ser mayor que 0")
        except ValueError:
            await message.answer(
                "‚ùå **Duraci√≥n inv√°lida**\n\n"
                "Por favor ingresa un n√∫mero entero mayor que 0.\n"
                "Ejemplo: 30"
            )
            return
        
        await state.update_data(duration_days=duration)
        data = await state.get_data()
        
        text = "‚ûï **CREAR NUEVA TARIFA**\n\n"
        text += "üìù **Paso 5/5: Descripci√≥n (Opcional)**\n\n"
        text += f"üìù **Nombre:** {data['name']}\n"
        text += f"üí∞ **Precio:** ${data['price']:.2f}\n"
        text += f"‚è∞ **Duraci√≥n:** {duration} d√≠as\n\n"
        text += "Ingresa una descripci√≥n atractiva (opcional):\n\n"
        text += "‚ú® **Ejemplos de Descripciones:**\n"
        text += "‚Ä¢ \"Acceso completo al contenido premium\"\n"
        text += "‚Ä¢ \"Incluye contenido exclusivo y sin anuncios\"\n"
        text += "‚Ä¢ \"Acceso prioritario a nuevo contenido\"\n\n"
        text += "üí° Escribe la descripci√≥n o usa /skip para omitir:"
        
        await state.set_state(TariffCreationStates.waiting_for_description)
        await message.answer(
            text,
            parse_mode="Markdown",
            reply_markup=get_tariff_creation_keyboard("description")
        )
        
    except Exception as e:
        await message.answer(f"Error al procesar duraci√≥n: {str(e)}")

@tariff_router.message(TariffCreationStates.waiting_for_description)
async def tariff_description_received(message: Message, state: FSMContext, session: AsyncSession):
    """Recibe la descripci√≥n y crea la tarifa."""
    try:
        description = None
        if message.text.strip().lower() != "/skip":
            description = message.text.strip()
        
        data = await state.get_data()
        
        # Crear la tarifa usando el servicio Tokeneitor
        event_bus = EventBus()
        tokeneitor = Tokeneitor(event_bus)
        
        # Por ahora simulamos la creaci√≥n exitosa
        # En producci√≥n se usar√≠a: 
        # tariff_id = await tokeneitor.create_tariff(
        #     channel_id=data['channel_id'],
        #     name=data['name'],
        #     price=data['price'],
        #     duration_days=data['duration_days'],
        #     admin_id=message.from_user.id,
        #     description=description
        # )
        
        tariff_id = 123  # Simulado
        
        if tariff_id:
            text = "‚úÖ **TARIFA CREADA EXITOSAMENTE**\n\n"
            text += f"üÜî **ID:** {tariff_id}\n"
            text += f"üìù **Nombre:** {data['name']}\n"
            text += f"üí∞ **Precio:** ${data['price']:.2f}\n"
            text += f"‚è∞ **Duraci√≥n:** {data['duration_days']} d√≠as\n"
            if description:
                text += f"üìÑ **Descripci√≥n:** {description}\n"
            text += f"üéØ **Estado:** Activa\n\n"
            text += "üöÄ **¬°La tarifa est√° lista para generar tokens!**\n"
            text += "Ahora puedes ir a 'Tokens VIP' para generar enlaces de venta."
            
            success_keyboard = [
                [{"text": "üé´ Generar Tokens", "data": "admin:tokens"}],
                [{"text": "üìã Ver Tarifas", "data": "tariff:list"}],
                [{"text": "‚¨ÖÔ∏è Panel Admin", "data": "admin:main"}]
            ]
        else:
            text = "‚ùå **Error al crear la tarifa**\n\n"
            text += "Ha ocurrido un problema al crear la tarifa.\n"
            text += "Por favor intenta nuevamente o contacta al soporte t√©cnico."
            
            success_keyboard = [
                [{"text": "üîÑ Intentar Nuevamente", "data": "tariff:create"}],
                [{"text": "‚¨ÖÔ∏è Volver", "data": "admin:tariffs"}]
            ]
        
        await state.clear()
        await message.answer(
            text,
            parse_mode="Markdown",
            reply_markup=create_keyboard_from_data(success_keyboard)
        )
        
    except Exception as e:
        await message.answer(f"Error al crear tarifa: {str(e)}")
        await state.clear()

@tariff_router.callback_query(F.data == "tariff:stats")
async def show_tariff_statistics(callback_query: CallbackQuery, session: AsyncSession):
    """Muestra estad√≠sticas detalladas de tarifas."""
    try:
        text = "üìä **ESTAD√çSTICAS DE TARIFAS**\n\n"
        
        # Estad√≠sticas simuladas - en producci√≥n vendr√≠an del servicio
        text += "üí∞ **Ingresos por Tarifa (√öltimo Mes):**\n"
        text += "‚Ä¢ VIP 1 Mes: $2,009.33 (67 ventas)\n"
        text += "‚Ä¢ VIP 1 Semana: $449.55 (45 ventas)\n"
        text += "‚Ä¢ VIP 3 Meses: $2,399.70 (30 ventas)\n"
        text += "‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n"
        text += "üíé **Total:** $4,858.58 (142 ventas)\n\n"
        
        text += "üìà **Rendimiento:**\n"
        text += "‚Ä¢ Tasa de Conversi√≥n Promedio: 91.0%\n"
        text += "‚Ä¢ Precio Promedio por Venta: $34.20\n"
        text += "‚Ä¢ Duraci√≥n Promedio: 38 d√≠as\n"
        text += "‚Ä¢ Crecimiento vs Mes Anterior: +23.5%\n\n"
        
        text += "üèÜ **Top Performers:**\n"
        text += "1. VIP 1 Mes (47.2% de ingresos)\n"
        text += "2. VIP 3 Meses (49.4% de ingresos)\n"
        text += "3. VIP 1 Semana (9.3% de ingresos)\n\n"
        
        text += "üìÖ **Tendencias:**\n"
        text += "‚Ä¢ Lunes: D√≠a con m√°s ventas\n"
        text += "‚Ä¢ 18:00-22:00: Horario pico de compras\n"
        text += "‚Ä¢ Tokens .99: +15% conversi√≥n vs precios redondos"
        
        stats_keyboard = [
            [{"text": "üì§ Exportar Datos", "data": "tariff:export"}],
            [{"text": "üìà Ver Gr√°ficos", "data": "tariff:charts"}],
            [{"text": "‚¨ÖÔ∏è Volver", "data": "admin:tariffs"}]
        ]
        
        await callback_query.message.edit_text(
            text,
            parse_mode="Markdown",
            reply_markup=create_keyboard_from_data(stats_keyboard)
        )
        await callback_query.answer()
        
    except Exception as e:
        await callback_query.answer(f"Error al obtener estad√≠sticas: {str(e)}")

# Funciones auxiliares

async def get_tariff_statistics(tokeneitor: Tokeneitor) -> Dict[str, Any]:
    """Obtiene estad√≠sticas de tarifas."""
    # Por ahora devuelve datos simulados
    return {
        "active_count": 3,
        "inactive_count": 0,
        "total_tokens": 156,
        "redeemed_tokens": 142,
        "popular_tariffs": [
            {"name": "VIP 1 Mes", "price": 29.99, "sales": 67},
            {"name": "VIP 1 Semana", "price": 9.99, "sales": 45},
            {"name": "VIP 3 Meses", "price": 79.99, "sales": 30}
        ]
    }

def create_keyboard_from_data(keyboard_data: List[List[Dict[str, str]]]):
    """Crea un teclado a partir de datos estructurados."""
    from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
    
    buttons = []
    for row in keyboard_data:
        button_row = []
        for button in row:
            button_row.append(InlineKeyboardButton(
                text=button["text"], 
                callback_data=button["data"]
            ))
        buttons.append(button_row)
    
    return InlineKeyboardMarkup(inline_keyboard=buttons)