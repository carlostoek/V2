from aiogram import Router, F
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.filters import Command
from sqlalchemy.ext.asyncio import AsyncSession
from datetime import datetime

from ...keyboards.admin.main_kb import get_admin_main_keyboard, get_admin_stats_keyboard, get_tariff_management_keyboard
from ...filters.role import IsAdminFilter
from src.modules.admin.service import AdminService
from src.modules.token.tokeneitor import Tokeneitor
from src.modules.channel.service import ChannelService
from src.core.event_bus import EventBus

admin_main_router = Router()

@admin_main_router.message(Command("admin"), IsAdminFilter())
async def admin_start(message: Message, session: AsyncSession):
    """Handler para el comando /admin."""
    user_id = message.from_user.id
    username = message.from_user.username or f"User_{user_id}"
    
    # Obtener estad√≠sticas r√°pidas
    event_bus = EventBus()
    tokeneitor = Tokeneitor(event_bus)
    
    # Mensaje de bienvenida completo
    welcome_text = "üëë **PANEL DE ADMINISTRACI√ìN - DIANA BOT V2**\n\n"
    welcome_text += "üéØ **Sistema Monetario Completo**\n"
    welcome_text += "‚Ä¢ Gesti√≥n de Tarifas y Precios\n"
    welcome_text += "‚Ä¢ Generaci√≥n y Control de Tokens VIP\n"
    welcome_text += "‚Ä¢ Estad√≠sticas de Ventas en Tiempo Real\n"
    welcome_text += "‚Ä¢ Control de Usuarios y Suscripciones\n"
    welcome_text += "‚Ä¢ Gesti√≥n de Canales VIP/Free\n\n"
    welcome_text += f"üë®‚Äçüíº **Admin:** {username}\n"
    welcome_text += f"üïê **Sesi√≥n iniciada:** {message.date.strftime('%H:%M:%S')}\n\n"
    welcome_text += "üöÄ **¬°Sistema listo para generar ingresos!**\n"
    welcome_text += "Selecciona una opci√≥n del men√∫:"
    
    await message.answer(
        welcome_text,
        parse_mode="Markdown",
        reply_markup=get_admin_main_keyboard()
    )

@admin_main_router.callback_query(F.data.startswith("admin:"))
async def handle_admin_callbacks(callback_query: CallbackQuery, session: AsyncSession):
    """Handler para callbacks del panel administrativo."""
    data = callback_query.data.split(":")
    section = data[1]
    
    if section == "stats":
        await show_admin_stats(callback_query, session)
    elif section == "tariffs":
        # Redirigir al handler de tariff_management
        from .tariff_management import show_tariff_management
        await show_tariff_management(callback_query, session)
    elif section == "tokens":
        # Redirigir al handler de token_management
        from .token_management import show_token_management
        await show_token_management(callback_query, session)
    elif section == "users":
        # Redirigir al handler de user_management
        from .user_management import show_user_management
        await show_user_management(callback_query, session)
    elif section == "channels":
        # Ser√° implementado en channel_management.py
        await callback_query.answer("üì¢ Gesti√≥n de canales - En construcci√≥n...")
    elif section == "notifications":
        # Redirigir al handler de notifications
        from .notifications import show_notification_panel
        await show_notification_panel(callback_query, session)
    elif section == "export":
        # Redirigir al handler de exportaci√≥n
        await handle_data_export(callback_query, session)
    elif section == "settings":
        # Redirigir al handler de configuration
        from .configuration import show_configuration_panel
        await show_configuration_panel(callback_query, session)
    elif section == "main":
        # Volver al men√∫ principal
        await admin_start(callback_query.message, session)
        await callback_query.answer()
    else:
        await callback_query.answer("Opci√≥n no disponible")

async def show_admin_stats(callback_query: CallbackQuery, session: AsyncSession):
    """Muestra estad√≠sticas principales del bot."""
    try:
        event_bus = EventBus()
        admin_service = AdminService(event_bus)
        
        # Obtener estad√≠sticas reales
        user_stats = await admin_service.get_user_statistics()
        revenue_stats = await admin_service.get_revenue_statistics()
        top_tariffs = await admin_service.get_top_tariffs(3)
        
        stats_text = "üìä **ESTAD√çSTICAS DEL BOT EN TIEMPO REAL**\n\n"
        stats_text += "üë• **Usuarios:**\n"
        stats_text += f"‚Ä¢ Total: {user_stats['total_users']:,}\n"
        stats_text += f"‚Ä¢ VIP Activos: {user_stats['vip_users']:,}\n"
        stats_text += f"‚Ä¢ Free: {user_stats['free_users']:,}\n"
        stats_text += f"‚Ä¢ Activos (7 d√≠as): {user_stats['active_users']:,}\n"
        stats_text += f"‚Ä¢ Nuevos Hoy: {user_stats['today_new_users']:,}\n"
        stats_text += f"‚Ä¢ Baneados: {user_stats['banned_users']:,}\n\n"
        
        stats_text += "üí∞ **Ingresos (Mes Actual):**\n"
        stats_text += f"‚Ä¢ Tokens Generados: {revenue_stats['tokens_generated']:,}\n"
        stats_text += f"‚Ä¢ Tokens Canjeados: {revenue_stats['tokens_redeemed']:,}\n"
        stats_text += f"‚Ä¢ Tasa de Conversi√≥n: {revenue_stats['conversion_rate']:.1f}%\n"
        stats_text += f"‚Ä¢ Ingresos Estimados: ${revenue_stats['estimated_revenue']:,.2f}\n\n"
        
        if top_tariffs:
            stats_text += "üè∑Ô∏è **Tarifas M√°s Populares:**\n"
            for tariff in top_tariffs:
                stats_text += f"‚Ä¢ {tariff['name']}: {tariff['sales']} ventas (${tariff['revenue']:.2f})\n"
            stats_text += "\n"
        
        # M√©tricas calculadas
        total_users = user_stats['total_users']
        if total_users > 0:
            vip_rate = (user_stats['vip_users'] / total_users) * 100
            activity_rate = (user_stats['active_users'] / total_users) * 100
            
            stats_text += "üìà **M√©tricas de Rendimiento:**\n"
            stats_text += f"‚Ä¢ Tasa de Conversi√≥n VIP: {vip_rate:.1f}%\n"
            stats_text += f"‚Ä¢ Tasa de Actividad: {activity_rate:.1f}%\n"
            if revenue_stats['tokens_generated'] > 0:
                stats_text += f"‚Ä¢ Eficiencia de Tokens: {revenue_stats['conversion_rate']:.1f}%\n"
        
        stats_text += f"\nüïê **√öltima actualizaci√≥n:** {datetime.now().strftime('%H:%M:%S')}"
        
        await callback_query.message.edit_text(
            stats_text,
            parse_mode="Markdown",
            reply_markup=get_admin_stats_keyboard()
        )
        await callback_query.answer()
        
    except Exception as e:
        await callback_query.answer(f"Error al obtener estad√≠sticas: {str(e)}")

@admin_main_router.callback_query(F.data == "admin:refresh_stats")
async def refresh_stats(callback_query: CallbackQuery, session: AsyncSession):
    """Actualiza las estad√≠sticas."""
    await show_admin_stats(callback_query, session)
    await callback_query.answer("üìä Estad√≠sticas actualizadas")

async def handle_data_export(callback_query: CallbackQuery, session: AsyncSession):
    """Maneja la exportaci√≥n de datos."""
    try:
        event_bus = EventBus()
        admin_service = AdminService(event_bus)
        
        text = "üìä **EXPORTACI√ìN DE DATOS**\n\n"
        text += "Exporta estad√≠sticas y datos para an√°lisis externo\n\n"
        
        text += "üìà **Datos Disponibles:**\n"
        text += "‚Ä¢ Estad√≠sticas de usuarios\n"
        text += "‚Ä¢ Datos de ingresos y tokens\n"
        text += "‚Ä¢ Informaci√≥n de tarifas\n"
        text += "‚Ä¢ Historial de suscripciones\n"
        text += "‚Ä¢ M√©tricas de engagement\n\n"
        
        text += "üîÑ **Formatos:**\n"
        text += "‚Ä¢ JSON para an√°lisis program√°tico\n"
        text += "‚Ä¢ Texto formateado para reportes\n\n"
        
        text += "‚ö†Ô∏è **Nota:**\n"
        text += "Los datos exportados contienen informaci√≥n sensible.\n"
        text += "Man√©jalos con cuidado y siguiendo pol√≠ticas de privacidad."
        
        keyboard = [
            [
                InlineKeyboardButton(text="üìä Exportar JSON", callback_data="export:json"),
                InlineKeyboardButton(text="üìÑ Exportar Texto", callback_data="export:text")
            ],
            [
                InlineKeyboardButton(text="üìà Reporte Completo", callback_data="export:full_report"),
                InlineKeyboardButton(text="üí∞ Solo Ingresos", callback_data="export:revenue")
            ],
            [InlineKeyboardButton(text="‚¨ÖÔ∏è Panel Admin", callback_data="admin:main")]
        ]
        
        await callback_query.message.edit_text(
            text,
            parse_mode="Markdown",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard)
        )
        await callback_query.answer()
        
    except Exception as e:
        await callback_query.answer(f"Error: {str(e)}")

@admin_main_router.callback_query(F.data.startswith("export:"))
async def handle_export_actions(callback_query: CallbackQuery, session: AsyncSession):
    """Maneja las acciones de exportaci√≥n."""
    try:
        export_type = callback_query.data.split(":")[-1]
        
        event_bus = EventBus()
        admin_service = AdminService(event_bus)
        
        # Generar datos de exportaci√≥n
        if export_type == "json":
            result = await admin_service.export_statistics(format="json", date_range=30)
        elif export_type == "text":
            result = await admin_service.export_statistics(format="text", date_range=30)
        elif export_type == "full_report":
            result = await admin_service.export_statistics(format="full", date_range=30)
        elif export_type == "revenue":
            result = await admin_service.export_statistics(format="revenue", date_range=30)
        else:
            await callback_query.answer("‚ùå Tipo de exportaci√≥n no v√°lido")
            return
        
        if not result["success"]:
            await callback_query.answer(f"‚ùå Error: {result.get('error', 'Error desconocido')}")
            return
        
        # Mostrar datos exportados
        data = result["data"]
        
        text = f"‚úÖ **EXPORTACI√ìN COMPLETADA**\n\n"
        text += f"üìÖ **Fecha de exportaci√≥n:** {data['export_date'].strftime('%d/%m/%Y %H:%M')}\n"
        text += f"üìä **Per√≠odo:** {data['date_range_days']} d√≠as\n"
        text += f"üìÑ **Formato:** {data['format']}\n\n"
        
        # Mostrar resumen de datos
        if 'user_statistics' in data:
            user_stats = data['user_statistics']
            text += f"üë• **Usuarios:**\n"
            text += f"‚Ä¢ Total: {user_stats['total_users']:,}\n"
            text += f"‚Ä¢ VIP: {user_stats['vip_users']:,}\n"
            text += f"‚Ä¢ Activos: {user_stats['active_users']:,}\n\n"
        
        if 'revenue_statistics' in data:
            revenue_stats = data['revenue_statistics']
            text += f"üí∞ **Ingresos:**\n"
            text += f"‚Ä¢ Tokens generados: {revenue_stats['tokens_generated']:,}\n"
            text += f"‚Ä¢ Tokens canjeados: {revenue_stats['tokens_redeemed']:,}\n"
            text += f"‚Ä¢ Ingresos estimados: ${revenue_stats['estimated_revenue']:,.2f}\n\n"
        
        if 'top_tariffs' in data:
            text += f"üèÜ **Top Tarifas:**\n"
            for tariff in data['top_tariffs'][:3]:
                text += f"‚Ä¢ {tariff['name']}: {tariff['sales']} ventas\n"
        
        text += f"\nüíæ **Datos JSON:** Ver abajo\n"
        text += f"üìã **Copia el siguiente c√≥digo para usar en an√°lisis:**"
        
        # Crear archivo JSON simplificado
        import json
        json_data = json.dumps(data, indent=2, default=str)
        
        # Enviar primero el resumen
        keyboard = [
            [InlineKeyboardButton(text="üîÑ Nueva Exportaci√≥n", callback_data="admin:export")],
            [InlineKeyboardButton(text="‚¨ÖÔ∏è Panel Admin", callback_data="admin:main")]
        ]
        
        await callback_query.message.edit_text(
            text,
            parse_mode="Markdown",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard)
        )
        
        # Enviar datos JSON por separado
        json_text = f"```json\n{json_data[:3000]}{'...' if len(json_data) > 3000 else ''}\n```"
        await callback_query.message.answer(
            f"üìä **DATOS EXPORTADOS ({export_type.upper()})**\n\n{json_text}",
            parse_mode="Markdown"
        )
        
        await callback_query.answer("‚úÖ Datos exportados exitosamente")
        
    except Exception as e:
        await callback_query.answer(f"Error en exportaci√≥n: {str(e)}")
