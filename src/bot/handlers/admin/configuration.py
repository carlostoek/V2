"""Sistema de configuraci√≥n avanzada del bot."""

from aiogram import Router, F
from aiogram.types import CallbackQuery, Message, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from sqlalchemy.ext.asyncio import AsyncSession
from typing import Dict, Any
from datetime import datetime

from ...filters.role import IsAdminFilter
from src.modules.admin.service import AdminService
from src.core.event_bus import EventBus

configuration_router = Router()

class ConfigurationStates(StatesGroup):
    waiting_for_channel_id = State()
    waiting_for_wait_time = State()
    waiting_for_config_value = State()

@configuration_router.callback_query(F.data == "admin:settings")
async def show_configuration_panel(callback_query: CallbackQuery, session: AsyncSession):
    """Muestra el panel principal de configuraci√≥n."""
    try:
        event_bus = EventBus()
        admin_service = AdminService(event_bus)
        
        # Obtener configuraci√≥n actual
        config = await admin_service.get_bot_configuration()
        
        text = "‚öôÔ∏è **CONFIGURACI√ìN AVANZADA DEL BOT**\n\n"
        text += "Panel de control para ajustar el comportamiento del bot\n\n"
        
        text += "üîß **Configuraci√≥n Actual:**\n"
        text += f"‚Ä¢ Canal Free ID: {config.get('free_channel_id', 'No configurado')}\n"
        text += f"‚Ä¢ Tiempo de Espera: {config.get('wait_time_minutes', 15)} minutos\n"
        text += f"‚Ä¢ Estado del Sistema: {config.get('system_status', 'unknown').title()}\n"
        
        if config.get('last_updated'):
            last_update = config['last_updated']
            if isinstance(last_update, str):
                text += f"‚Ä¢ √öltima actualizaci√≥n: {last_update[:19]}\n"
            else:
                text += f"‚Ä¢ √öltima actualizaci√≥n: {last_update.strftime('%d/%m/%Y %H:%M')}\n"
        
        text += "\nüéõÔ∏è **Configuraciones Disponibles:**\n"
        text += "‚Ä¢ Canal gratuito y configuraciones de acceso\n"
        text += "‚Ä¢ Tiempos de espera y delays del sistema\n"
        text += "‚Ä¢ Configuraciones de notificaciones\n"
        text += "‚Ä¢ Par√°metros de gamificaci√≥n\n"
        text += "‚Ä¢ Configuraciones de seguridad\n\n"
        
        text += "‚ö†Ô∏è **Importante:**\n"
        text += "Cambios en la configuraci√≥n afectan el comportamiento\n"
        text += "global del bot. √ösalos con precauci√≥n."
        
        keyboard = [
            [
                InlineKeyboardButton(text="üì¢ Canal Free", callback_data="config:free_channel"),
                InlineKeyboardButton(text="‚è∞ Tiempos", callback_data="config:timing")
            ],
            [
                InlineKeyboardButton(text="üîî Notificaciones", callback_data="config:notifications"),
                InlineKeyboardButton(text="üéÆ Gamificaci√≥n", callback_data="config:gamification")
            ],
            [
                InlineKeyboardButton(text="üîê Seguridad", callback_data="config:security"),
                InlineKeyboardButton(text="üíæ Respaldo", callback_data="config:backup")
            ],
            [
                InlineKeyboardButton(text="üîÑ Reiniciar Config", callback_data="config:reset"),
                InlineKeyboardButton(text="üíæ Guardar Cambios", callback_data="config:save")
            ],
            [InlineKeyboardButton(text="‚¨ÖÔ∏è Panel Admin", callback_data="admin:main")]
        ]
        
        await callback_query.message.edit_text(
            text,
            parse_mode="Markdown",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard)
        )
        await callback_query.answer()
        
    except Exception as e:
        await callback_query.answer(f"Error: {str(e)}")

@configuration_router.callback_query(F.data.startswith("config:"))
async def handle_configuration_actions(callback_query: CallbackQuery, state: FSMContext, session: AsyncSession):
    """Maneja las acciones de configuraci√≥n."""
    try:
        action = callback_query.data.split(":")[-1]
        
        if action == "free_channel":
            await show_free_channel_config(callback_query, state, session)
        elif action == "timing":
            await show_timing_config(callback_query, state, session)
        elif action == "notifications":
            await show_notifications_config(callback_query, session)
        elif action == "gamification":
            await show_gamification_config(callback_query, session)
        elif action == "security":
            await show_security_config(callback_query, session)
        elif action == "backup":
            await show_backup_config(callback_query, session)
        elif action == "reset":
            await reset_configuration(callback_query, session)
        elif action == "save":
            await save_configuration(callback_query, session)
        else:
            await callback_query.answer("‚ùå Acci√≥n no reconocida")
            
    except Exception as e:
        await callback_query.answer(f"Error: {str(e)}")

async def show_free_channel_config(callback_query: CallbackQuery, state: FSMContext, session: AsyncSession):
    """Muestra configuraci√≥n del canal gratuito."""
    try:
        event_bus = EventBus()
        admin_service = AdminService(event_bus)
        
        config = await admin_service.get_bot_configuration()
        current_channel = config.get('free_channel_id', 'No configurado')
        
        text = "üì¢ **CONFIGURACI√ìN DEL CANAL FREE**\n\n"
        text += f"Canal actual: `{current_channel}`\n\n"
        
        text += "üîß **Configurar nuevo canal:**\n"
        text += "1. Agrega el bot como administrador al canal\n"
        text += "2. Copia el ID del canal (n√∫mero negativo)\n"
        text += "3. Ingresa el ID aqu√≠\n\n"
        
        text += "üí° **¬øC√≥mo obtener el ID del canal?**\n"
        text += "‚Ä¢ Forward un mensaje del canal a @userinfobot\n"
        text += "‚Ä¢ O usa @getidsbot en el canal\n"
        text += "‚Ä¢ El ID se ve como: -1001234567890\n\n"
        
        text += "Ingresa el nuevo ID del canal:"
        
        await state.set_state(ConfigurationStates.waiting_for_channel_id)
        
        keyboard = [
            [InlineKeyboardButton(text="‚ùå Cancelar", callback_data="admin:settings")]
        ]
        
        await callback_query.message.edit_text(
            text,
            parse_mode="Markdown",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard)
        )
        await callback_query.answer()
        
    except Exception as e:
        await callback_query.answer(f"Error: {str(e)}")

@configuration_router.message(ConfigurationStates.waiting_for_channel_id)
async def process_channel_id(message: Message, state: FSMContext, session: AsyncSession):
    """Procesa el nuevo ID del canal."""
    try:
        channel_id_str = message.text.strip()
        
        try:
            channel_id = int(channel_id_str)
            
            # Validar que es un ID de canal v√°lido (negativo)
            if channel_id >= 0:
                await message.answer(
                    "‚ùå **ID inv√°lido**\n\n"
                    "Los IDs de canal deben ser n√∫meros negativos.\n"
                    "Ejemplo: -1001234567890\n\n"
                    "Intenta nuevamente:"
                )
                return
                
        except ValueError:
            await message.answer(
                "‚ùå **Formato inv√°lido**\n\n"
                "Por favor ingresa un n√∫mero v√°lido.\n"
                "Ejemplo: -1001234567890\n\n"
                "Intenta nuevamente:"
            )
            return
        
        # Actualizar configuraci√≥n
        event_bus = EventBus()
        admin_service = AdminService(event_bus)
        
        result = await admin_service.update_bot_configuration(
            {"free_channel_id": channel_id},
            admin_id=message.from_user.id
        )
        
        await state.clear()
        
        if result["success"]:
            await message.answer(
                f"‚úÖ **Canal Free Actualizado**\n\n"
                f"Nuevo canal ID: `{channel_id}`\n\n"
                f"‚ö†Ô∏è **Importante:**\n"
                f"Aseg√∫rate de que el bot sea administrador del canal\n"
                f"para que funcione correctamente.",
                parse_mode="Markdown"
            )
        else:
            await message.answer(f"‚ùå Error al actualizar: {result.get('error', 'Error desconocido')}")
            
    except Exception as e:
        await message.answer(f"Error: {str(e)}")
        await state.clear()

async def show_timing_config(callback_query: CallbackQuery, state: FSMContext, session: AsyncSession):
    """Muestra configuraci√≥n de tiempos."""
    try:
        event_bus = EventBus()
        admin_service = AdminService(event_bus)
        
        config = await admin_service.get_bot_configuration()
        current_time = config.get('wait_time_minutes', 15)
        
        text = "‚è∞ **CONFIGURACI√ìN DE TIEMPOS**\n\n"
        text += f"Tiempo de espera actual: {current_time} minutos\n\n"
        
        text += "üîß **Configurar nuevo tiempo:**\n"
        text += "Tiempo en minutos antes de aprobar solicitudes\n"
        text += "del canal gratuito autom√°ticamente.\n\n"
        
        text += "‚öñÔ∏è **Valores recomendados:**\n"
        text += "‚Ä¢ 0 minutos: Aprobaci√≥n inmediata\n"
        text += "‚Ä¢ 15 minutos: Tiempo est√°ndar\n"
        text += "‚Ä¢ 60 minutos: Tiempo moderado\n"
        text += "‚Ä¢ 1440 minutos: 24 horas (m√°ximo)\n\n"
        
        text += "Ingresa el nuevo tiempo en minutos:"
        
        await state.set_state(ConfigurationStates.waiting_for_wait_time)
        
        keyboard = [
            [
                InlineKeyboardButton(text="0 min", callback_data="set_time:0"),
                InlineKeyboardButton(text="15 min", callback_data="set_time:15")
            ],
            [
                InlineKeyboardButton(text="30 min", callback_data="set_time:30"),
                InlineKeyboardButton(text="60 min", callback_data="set_time:60")
            ],
            [InlineKeyboardButton(text="‚ùå Cancelar", callback_data="admin:settings")]
        ]
        
        await callback_query.message.edit_text(
            text,
            parse_mode="Markdown",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard)
        )
        await callback_query.answer()
        
    except Exception as e:
        await callback_query.answer(f"Error: {str(e)}")

@configuration_router.callback_query(F.data.startswith("set_time:"))
async def set_wait_time_quick(callback_query: CallbackQuery, session: AsyncSession):
    """Establece tiempo de espera r√°pidamente."""
    try:
        wait_time = int(callback_query.data.split(":")[-1])
        
        event_bus = EventBus()
        admin_service = AdminService(event_bus)
        
        result = await admin_service.update_bot_configuration(
            {"wait_time_minutes": wait_time},
            admin_id=callback_query.from_user.id
        )
        
        if result["success"]:
            await callback_query.answer(f"‚úÖ Tiempo actualizado a {wait_time} minutos")
            # Volver a mostrar panel de configuraci√≥n
            await show_configuration_panel(callback_query, session)
        else:
            await callback_query.answer(f"‚ùå Error: {result.get('error', 'Error desconocido')}")
            
    except Exception as e:
        await callback_query.answer(f"Error: {str(e)}")

@configuration_router.message(ConfigurationStates.waiting_for_wait_time)
async def process_wait_time(message: Message, state: FSMContext, session: AsyncSession):
    """Procesa el nuevo tiempo de espera."""
    try:
        time_str = message.text.strip()
        
        try:
            wait_time = int(time_str)
            
            if wait_time < 0 or wait_time > 1440:
                await message.answer(
                    "‚ùå **Tiempo inv√°lido**\n\n"
                    "El tiempo debe ser entre 0 y 1440 minutos (24 horas).\n\n"
                    "Intenta nuevamente:"
                )
                return
                
        except ValueError:
            await message.answer(
                "‚ùå **Formato inv√°lido**\n\n"
                "Por favor ingresa un n√∫mero entero.\n"
                "Ejemplo: 15\n\n"
                "Intenta nuevamente:"
            )
            return
        
        # Actualizar configuraci√≥n
        event_bus = EventBus()
        admin_service = AdminService(event_bus)
        
        result = await admin_service.update_bot_configuration(
            {"wait_time_minutes": wait_time},
            admin_id=message.from_user.id
        )
        
        await state.clear()
        
        if result["success"]:
            time_text = f"{wait_time} minutos"
            if wait_time == 0:
                time_text = "inmediata (0 minutos)"
            elif wait_time >= 60:
                hours = wait_time // 60
                minutes = wait_time % 60
                time_text = f"{hours}h {minutes}m"
                
            await message.answer(
                f"‚úÖ **Tiempo de Espera Actualizado**\n\n"
                f"Nueva configuraci√≥n: {time_text}\n\n"
                f"Las solicitudes de canal free ahora se aprobar√°n\n"
                f"despu√©s de este tiempo de espera."
            )
        else:
            await message.answer(f"‚ùå Error al actualizar: {result.get('error', 'Error desconocido')}")
            
    except Exception as e:
        await message.answer(f"Error: {str(e)}")
        await state.clear()

async def show_notifications_config(callback_query: CallbackQuery, session: AsyncSession):
    """Muestra configuraci√≥n de notificaciones."""
    text = "üîî **CONFIGURACI√ìN DE NOTIFICACIONES**\n\n"
    text += "üîÑ Esta funcionalidad est√° en desarrollo\n\n"
    text += "Pr√≥ximas configuraciones:\n"
    text += "‚Ä¢ Habilitar/deshabilitar tipos de alertas\n"
    text += "‚Ä¢ Configurar horarios de reportes\n"
    text += "‚Ä¢ Establecer umbrales de alerta\n"
    text += "‚Ä¢ Configurar canales de notificaci√≥n\n"
    text += "‚Ä¢ Personalizar mensajes de alerta\n"
    
    keyboard = [
        [InlineKeyboardButton(text="‚¨ÖÔ∏è Volver", callback_data="admin:settings")]
    ]
    
    await callback_query.message.edit_text(
        text,
        parse_mode="Markdown",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard)
    )
    await callback_query.answer()

async def show_gamification_config(callback_query: CallbackQuery, session: AsyncSession):
    """Muestra configuraci√≥n de gamificaci√≥n."""
    text = "üéÆ **CONFIGURACI√ìN DE GAMIFICACI√ìN**\n\n"
    text += "üîÑ Esta funcionalidad est√° en desarrollo\n\n"
    text += "Pr√≥ximas configuraciones:\n"
    text += "‚Ä¢ Multiplicadores de puntos (besitos)\n"
    text += "‚Ä¢ Configuraci√≥n de misiones\n"
    text += "‚Ä¢ Niveles y experiencia requerida\n"
    text += "‚Ä¢ Premios y recompensas\n"
    text += "‚Ä¢ Configuraci√≥n de la tienda\n"
    
    keyboard = [
        [InlineKeyboardButton(text="‚¨ÖÔ∏è Volver", callback_data="admin:settings")]
    ]
    
    await callback_query.message.edit_text(
        text,
        parse_mode="Markdown",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard)
    )
    await callback_query.answer()

async def show_security_config(callback_query: CallbackQuery, session: AsyncSession):
    """Muestra configuraci√≥n de seguridad."""
    text = "üîê **CONFIGURACI√ìN DE SEGURIDAD**\n\n"
    text += "üîÑ Esta funcionalidad est√° en desarrollo\n\n"
    text += "Pr√≥ximas configuraciones:\n"
    text += "‚Ä¢ Lista de administradores autorizados\n"
    text += "‚Ä¢ Configuraci√≥n de rate limiting\n"
    text += "‚Ä¢ Filtros de contenido autom√°tico\n"
    text += "‚Ä¢ Configuraci√≥n de baneos autom√°ticos\n"
    text += "‚Ä¢ Logs de auditor√≠a y seguridad\n"
    
    keyboard = [
        [InlineKeyboardButton(text="‚¨ÖÔ∏è Volver", callback_data="admin:settings")]
    ]
    
    await callback_query.message.edit_text(
        text,
        parse_mode="Markdown",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard)
    )
    await callback_query.answer()

async def show_backup_config(callback_query: CallbackQuery, session: AsyncSession):
    """Muestra configuraci√≥n de respaldo."""
    text = "üíæ **CONFIGURACI√ìN DE RESPALDO**\n\n"
    text += "üîÑ Esta funcionalidad est√° en desarrollo\n\n"
    text += "Pr√≥ximas configuraciones:\n"
    text += "‚Ä¢ Respaldos autom√°ticos de base de datos\n"
    text += "‚Ä¢ Exportaci√≥n programada de datos\n"
    text += "‚Ä¢ Restauraci√≥n de configuraciones\n"
    text += "‚Ä¢ Sincronizaci√≥n con servicios en la nube\n"
    text += "‚Ä¢ Programaci√≥n de backups\n"
    
    keyboard = [
        [InlineKeyboardButton(text="‚¨ÖÔ∏è Volver", callback_data="admin:settings")]
    ]
    
    await callback_query.message.edit_text(
        text,
        parse_mode="Markdown",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard)
    )
    await callback_query.answer()

async def reset_configuration(callback_query: CallbackQuery, session: AsyncSession):
    """Reinicia la configuraci√≥n a valores por defecto."""
    text = "üîÑ **REINICIAR CONFIGURACI√ìN**\n\n"
    text += "‚ö†Ô∏è **ADVERTENCIA**\n\n"
    text += "Esta acci√≥n restaurar√° toda la configuraci√≥n\n"
    text += "a los valores por defecto:\n\n"
    text += "‚Ä¢ Canal Free ID: No configurado\n"
    text += "‚Ä¢ Tiempo de espera: 15 minutos\n"
    text += "‚Ä¢ Todas las configuraciones personalizadas se perder√°n\n\n"
    text += "Esta acci√≥n NO se puede deshacer.\n\n"
    text += "¬øEst√°s seguro de continuar?"
    
    keyboard = [
        [
            InlineKeyboardButton(text="‚úÖ S√≠, Reiniciar", callback_data="confirm_reset:yes"),
            InlineKeyboardButton(text="‚ùå Cancelar", callback_data="admin:settings")
        ]
    ]
    
    await callback_query.message.edit_text(
        text,
        parse_mode="Markdown",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard)
    )
    await callback_query.answer()

@configuration_router.callback_query(F.data == "confirm_reset:yes")
async def confirm_reset_configuration(callback_query: CallbackQuery, session: AsyncSession):
    """Confirma el reinicio de configuraci√≥n."""
    try:
        event_bus = EventBus()
        admin_service = AdminService(event_bus)
        
        # Configuraci√≥n por defecto
        default_config = {
            "free_channel_id": None,
            "wait_time_minutes": 15
        }
        
        result = await admin_service.update_bot_configuration(
            default_config,
            admin_id=callback_query.from_user.id
        )
        
        if result["success"]:
            await callback_query.answer("‚úÖ Configuraci√≥n reiniciada exitosamente")
            # Mostrar panel de configuraci√≥n actualizado
            await show_configuration_panel(callback_query, session)
        else:
            await callback_query.answer(f"‚ùå Error: {result.get('error', 'Error desconocido')}")
            
    except Exception as e:
        await callback_query.answer(f"Error: {str(e)}")

async def save_configuration(callback_query: CallbackQuery, session: AsyncSession):
    """Guarda la configuraci√≥n actual."""
    try:
        # En una implementaci√≥n real, esto podr√≠a guardar a un archivo o hacer backup
        await callback_query.answer("‚úÖ Configuraci√≥n guardada (funcionalidad simulada)")
        
    except Exception as e:
        await callback_query.answer(f"Error: {str(e)}")