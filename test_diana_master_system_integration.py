#!/usr/bin/env python3
"""
üé≠ DIANA MASTER SYSTEM - INTEGRATION TEST
========================================

Test para validar la integraci√≥n completa del Diana Master System 
refactorizado con funcionalidades de conversi√≥n FREE‚ÜíVIP y upsell VIP‚ÜíPremium.
"""

import asyncio
import sys
import os

# Add project to path
sys.path.insert(0, os.path.dirname(__file__))

async def test_diana_master_system_integration():
    """Prueba la integraci√≥n completa del sistema refactorizado"""
    print("üé≠ PRUEBA DEL SISTEMA DIANA MASTER REFACTORIZADO")
    print("=" * 70)
    
    success_count = 0
    total_tests = 0
    
    try:
        # Test 1: Import del sistema refactorizado
        print("üì¶ Test 1: Importando Diana Master System refactorizado...")
        total_tests += 1
        
        from src.bot.core.diana_master_system import (
            DianaMasterInterface, AdaptiveContextEngine, UserMoodState,
            register_diana_master_system, CONTENT_PACKAGES
        )
        
        print("   ‚úÖ Sistema refactorizado importado correctamente")
        success_count += 1
        
        # Test 2: Verificar nuevos mood states
        print("üé≠ Test 2: Verificando mood states de conversi√≥n...")
        total_tests += 1
        
        assert hasattr(UserMoodState, 'FREE_CONVERSION'), "Mood FREE_CONVERSION no encontrado"
        assert hasattr(UserMoodState, 'VIP_UPSELL'), "Mood VIP_UPSELL no encontrado"
        assert UserMoodState.FREE_CONVERSION.value == "free_conversion"
        assert UserMoodState.VIP_UPSELL.value == "vip_upsell"
        
        print("   ‚úÖ Mood states de conversi√≥n verificados")
        success_count += 1
        
        # Test 3: Verificar paquetes de contenido
        print("üéÅ Test 3: Verificando paquetes de contenido...")
        total_tests += 1
        
        required_packages = ["intimate_conversations", "exclusive_photos", "custom_videos", "vip_experiences"]
        for package in required_packages:
            assert package in CONTENT_PACKAGES, f"Paquete {package} no encontrado"
            package_data = CONTENT_PACKAGES[package]
            assert 'title' in package_data, f"Paquete {package} sin t√≠tulo"
            assert 'price' in package_data, f"Paquete {package} sin precio"
            assert 'diana_seduction' in package_data, f"Paquete {package} sin seducci√≥n de Diana"
        
        print(f"   ‚úÖ {len(CONTENT_PACKAGES)} paquetes de contenido verificados")
        success_count += 1
        
        # Test 4: Crear servicios mock
        print("üîß Test 4: Creando servicios mock...")
        total_tests += 1
        
        from unittest.mock import AsyncMock, MagicMock
        
        mock_services = {
            'gamification': AsyncMock(),
            'admin': AsyncMock(),
            'narrative': AsyncMock(),
            'event_bus': AsyncMock()
        }
        
        # Configurar servicios mock para FREE user
        mock_services['gamification'].get_user_stats = AsyncMock(return_value={
            'level': 6, 'points': 1200, 'achievements_count': 10,
            'streak': 15, 'points_today': 85, 'total_interactions': 320, 'active_missions': 3
        })
        
        mock_services['admin'].is_vip_user = AsyncMock(return_value=False)  # FREE user
        mock_services['admin'].send_admin_notification = AsyncMock()
        mock_services['narrative'].get_user_narrative_progress = AsyncMock(return_value={'progress': 45})
        
        print("   ‚úÖ Servicios mock configurados")
        success_count += 1
        
        # Test 5: Crear sistema Diana Master
        print("üß† Test 5: Creando Diana Master Interface...")
        total_tests += 1
        
        master_interface = DianaMasterInterface(mock_services)
        assert master_interface is not None
        assert hasattr(master_interface, 'create_adaptive_interface')
        assert hasattr(master_interface, 'context_engine')
        
        print("   ‚úÖ Diana Master Interface creado correctamente")
        success_count += 1
        
        # Test 6: Probar detecci√≥n de mood FREE_CONVERSION
        print("üåô Test 6: Probando detecci√≥n de mood FREE_CONVERSION...")
        total_tests += 1
        
        test_user_id = 123456789
        
        # Simular interacciones para activar FREE_CONVERSION mood
        from datetime import datetime, timedelta
        now = datetime.now()
        master_interface.context_engine.interaction_patterns[test_user_id] = [
            ('start', now - timedelta(days=1)), 
            ('shop', now - timedelta(days=2)), 
            ('story', now - timedelta(days=1)), 
            ('trivia', now - timedelta(hours=12)), 
            ('daily', now - timedelta(hours=6)),
            ('profile', now - timedelta(hours=2))  # 6+ interactions = high engagement
        ]
        
        context = await master_interface.context_engine.analyze_user_context(test_user_id)
        
        assert context.current_mood == UserMoodState.FREE_CONVERSION, f"Expected FREE_CONVERSION, got {context.current_mood}"
        
        print("   ‚úÖ Mood FREE_CONVERSION detectado correctamente")
        success_count += 1
        
        # Test 7: Probar interfaz adaptativa para FREE_CONVERSION
        print("üé≠ Test 7: Probando interfaz adaptativa FREE_CONVERSION...")
        total_tests += 1
        
        text, keyboard = await master_interface.create_adaptive_interface(test_user_id)
        
        assert isinstance(text, str)
        assert "Diana te reconoce" in text or "Diana se acerca" in text or "Diana te susurra" in text
        assert "Alma Libre" in text  # FREE user indicator
        assert keyboard is not None
        assert len(keyboard.inline_keyboard) > 0
        
        # Verificar botones espec√≠ficos para FREE_CONVERSION
        button_texts = []
        for row in keyboard.inline_keyboard:
            for button in row:
                button_texts.append(button.text)
        
        assert "üíé El Div√°n VIP" in button_texts, "Bot√≥n VIP no encontrado en FREE_CONVERSION"
        assert "üéÅ Tesoros Especiales" in button_texts, "Bot√≥n paquetes no encontrado en FREE_CONVERSION"
        
        print("   ‚úÖ Interfaz FREE_CONVERSION creada correctamente")
        success_count += 1
        
        # Test 8: Probar usuario VIP con mood VIP_UPSELL
        print("üëë Test 8: Probando detecci√≥n VIP_UPSELL...")
        total_tests += 1
        
        # Cambiar mock para usuario VIP con high engagement
        mock_services['admin'].is_vip_user = AsyncMock(return_value=True)
        mock_services['gamification'].get_user_stats = AsyncMock(return_value={
            'level': 8, 'points': 2500, 'achievements_count': 20,  # High stats
            'streak': 25, 'active_missions': 5
        })
        
        vip_interface = DianaMasterInterface(mock_services)
        vip_interface.context_engine.interaction_patterns[test_user_id] = [
            ('vip_chat', now - timedelta(hours=1)), 
            ('premium_content', now - timedelta(hours=3)), 
            ('exclusive', now - timedelta(minutes=30))
        ]
        
        vip_context = await vip_interface.context_engine.analyze_user_context(test_user_id)
        vip_text, vip_keyboard = await vip_interface.create_adaptive_interface(test_user_id)
        
        assert vip_context.current_mood == UserMoodState.VIP_UPSELL, f"Expected VIP_UPSELL, got {vip_context.current_mood}"
        assert "Elegido del C√≠rculo" in vip_text, "VIP status not shown"
        
        # Verificar botones VIP espec√≠ficos
        vip_button_texts = []
        for row in vip_keyboard.inline_keyboard:
            for button in row:
                vip_button_texts.append(button.text)
        
        assert "üí¨ Chat Privado" in vip_button_texts, "Bot√≥n Chat Privado no encontrado"
        assert "üåü Premium Plus" in vip_button_texts, "Bot√≥n Premium Plus no encontrado"
        
        print("   ‚úÖ Interfaz VIP_UPSELL verificada")
        success_count += 1
        
        # Test 9: Probar sistema de notificaciones
        print("üì± Test 9: Probando sistema de notificaciones...")
        total_tests += 1
        
        from src.bot.core.diana_master_system import send_admin_notification
        
        # Simular inter√©s de usuario
        await send_admin_notification(
            master_interface, 
            test_user_id, 
            "vip_channel", 
            context
        )
        
        # Verificar que se llam√≥ send_admin_notification
        mock_services['admin'].send_admin_notification.assert_called()
        call_args = mock_services['admin'].send_admin_notification.call_args[0][0]
        assert "INTER√âS DE USUARIO" in call_args
        assert f"User ID: {test_user_id}" in call_args
        assert "INTER√âS EN DIV√ÅN VIP" in call_args
        
        print("   ‚úÖ Sistema de notificaciones verificado")
        success_count += 1
        
        # Test 10: Probar registro del sistema
        print("üõ£Ô∏è Test 10: Probando registro del router...")
        total_tests += 1
        
        mock_dp = MagicMock()
        mock_dp.include_router = MagicMock()
        
        registered_system = register_diana_master_system(mock_dp, mock_services)
        
        assert registered_system is not None
        mock_dp.include_router.assert_called()
        
        print("   ‚úÖ Router registrado correctamente")
        success_count += 1
        
        print("\n" + "=" * 70)
        print("üéâ VALIDACI√ìN COMPLETA DEL SISTEMA REFACTORIZADO!")
        print("=" * 70)
        
        print(f"\nüìä RESULTADOS:")
        print(f"   ‚úÖ Tests exitosos: {success_count}/{total_tests}")
        print(f"   üìà Tasa de √©xito: {(success_count/total_tests)*100:.1f}%")
        
        print(f"\nüé≠ CARACTER√çSTICAS REFACTORIZADAS VALIDADAS:")
        print(f"   ‚Ä¢ Mood states FREE_CONVERSION y VIP_UPSELL ‚úÖ")
        print(f"   ‚Ä¢ Detecci√≥n autom√°tica VIP/FREE ‚úÖ") 
        print(f"   ‚Ä¢ Templates din√°micos con Diana & Lucien ‚úÖ")
        print(f"   ‚Ä¢ {len(CONTENT_PACKAGES)} paquetes de contenido integrados ‚úÖ")
        print(f"   ‚Ä¢ Sistema de notificaciones admin ‚úÖ")
        print(f"   ‚Ä¢ Keyboards adaptativos por mood ‚úÖ")
        print(f"   ‚Ä¢ Integraci√≥n completa en DMS ‚úÖ")
        
        print(f"\nüåπ VENTAJAS DE LA REFACTORIZACI√ìN:")
        print(f"   ‚Ä¢ Un solo sistema din√°mico vs dos sistemas separados")
        print(f"   ‚Ä¢ Context engine autom√°tico para FREE/VIP detection") 
        print(f"   ‚Ä¢ Templates adaptativos en lugar de interfaces fijas")
        print(f"   ‚Ä¢ Integraci√≥n nativa con mood detection existente")
        print(f"   ‚Ä¢ Mantenimiento simplificado y escalabilidad mejorada")
        
        if success_count == total_tests:
            print(f"\nüéâ REFACTORIZACI√ìN PERFECTA - DIANA MASTER SYSTEM UNIFIED! üéâ")
            return True
        else:
            print(f"\n‚ö†Ô∏è Algunos tests fallaron - Revisar antes de producci√≥n")
            return False
            
    except Exception as e:
        print(f"\n‚ùå ERROR EN VALIDACI√ìN: {e}")
        import traceback
        traceback.print_exc()
        return False

async def main():
    """Run comprehensive integration validation"""
    print("üé≠ DIANA MASTER SYSTEM - VALIDACI√ìN DE REFACTORIZACI√ìN")
    print("=" * 70)
    
    success = await test_diana_master_system_integration()
    
    if success:
        print(f"\nüé≠üåπ Diana Master System Refactorizado - ¬°Perfecci√≥n T√©cnica Lograda! üé≠üåπ")
        print("‚ú® Un solo sistema din√°mico que maneja conversi√≥n y upsell autom√°ticamente! ‚ú®")
        print("üöÄ Ready to convert FREE users and upsell VIPs with intelligent templates!")
    else:
        print(f"\n‚ö†Ô∏è Sistema necesita ajustes antes de conquistar corazones")
    
    return success

if __name__ == "__main__":
    asyncio.run(main())